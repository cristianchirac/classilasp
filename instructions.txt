Install Python (latest version is strongly advised).
Download ILASP and follow installation steps at: https://www.doc.ic.ac.uk/~ml1909/ILASP/manual.pdf.

After downloading the classilasp package, you can either go to it and run from terminal "./classilasp <path-to-input-file.pl>" or you can add the classilasp *directory* to PATH:

export PATH="/your/absolute/path/to/classilasp:$PATH"

and simply call "classilasp <path-to-input-file.pl>" from any directory you want (to make this permanent, you can add the export command from above at the end of "~/.bashrc" to be run everytime a shell is started).

For Windows Bash users, before running classilasp, please: 
1. install and run Xming. 
2. run "export DISPLAY=:0"
These two steps are required in order to be able to view the graph diagrams.


For performance and safety reasons, the following assumptions are made with regards to the provided file:

1. It is a syntactically correct Prolog file.
2. Each model is defined with predicate: model(model_id).
3. Each of that model's nodes, ports and edges are defined before any other new model is defined.
4. Each of model_id's nodes are defined with predicate: node(model_id,node_id).
5. Each of node_id's ports are defined with predicate: port(node_id,port_id,group_no,direction,type).
6. Each of model_id's edges are defined with predicate: edge(model_id,edge_id,port_id_1,port_id_2).

When component diagrams are generated, this is what each element represents:
1. Each circular node is a port.
2. Every port's type is the label written on it.
3. Every port's colour represents its direction:
	* green - in, red - out, orange - inout
4. Every blue box represents ports of the same group.

For label names, it's probably best to stick to low characters, numbers and underscores, in order to comply with the ILASP and ASP syntax (maybe include the actual syntax rules in the instructions). Also, very importantly, make sure there are no name collisions between labels and port/node/model ids, types, etc.

Note that hypotheses might not be mutually exclusive on all models (in which case a more refined classification process is required) and so some models might get multiple different labels. Also, because labelling is done concurrently on multiple threads, the models will likely appear in a different order than the initial one.